/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.DAO;

import dao.UserDAO;

import javax.swing.JOptionPane;
import model.User;
import controller.Room;
import controller.Server;
import controller.ServerThread;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.table.DefaultTableModel;

import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import javax.swing.JTable;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 *
 * @author Admin
 */
public class Admin extends javax.swing.JFrame implements Runnable{
    private UserDAO userDAO;
    /**
     * Creates new form Admin
     */
    public Admin() {
        initComponents();
        this.setResizable(false);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        
        tableModel = new DefaultTableModel();
     
        tableModel.addColumn("ID");
        tableModel.addColumn("Username");
        tableModel.addColumn("Pass");
        tableModel.addColumn("NickName");
        
        table = new JTable(tableModel);
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                // Get the selected row index
                int selectedRow = table.getSelectedRow();

                // Display a confirmation dialog
                int option = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this record?",
                        "Confirm Deletion", JOptionPane.YES_NO_OPTION);

                // If the user confirms the deletion, proceed with deleting the row
                if (option == JOptionPane.YES_OPTION) {
                    // Get the ID of the selected record
                    String selectedId = table.getValueAt(selectedRow, 0).toString();

                    // Delete the record from the database
                    deleteRecord(selectedId);

                    // Remove the selected row from the table
                    tableModel.removeRow(selectedRow);
                }
            }
        });
        jScrollPane1.setViewportView(table);

        
        userDAO = new UserDAO();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    	
        
 		
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField3.setFont(new Font("Tahoma", Font.PLAIN, 11));
        jTextField3.setText("Nhập ID");
        jButton4 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();

        jTextField2.setText("jTextField2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Admin");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jButton4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton4.setText("Ban");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn lý do", "Ngôn ngữ thô tục - xúc phạm người khác", "Spam đăng nhập", "Sử dụng game với mục đích xấu", "Phát hiện rò rỉ bảo mật - tài khoản tạm thời bị khoá để kiểm tra thêm" }));
        
        JButton btnNewButton = new JButton("Tìm kiếm");
        btnNewButton.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		String tk=jTextField3.getText();
        		searchById(tk);
        	}
        });
        btnNewButton.setFont(new Font("Tahoma", Font.PLAIN, 14));
        
        JButton btnNewButton_1 = new JButton("Reset");
        btnNewButton_1.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		fetchDataFromMySQL();
        	}
        });
        btnNewButton_1.setFont(new Font("Tahoma", Font.PLAIN, 14));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(60)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 582, GroupLayout.PREFERRED_SIZE)
        					.addContainerGap(32, Short.MAX_VALUE))
        				.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        					.addGap(18)
        					.addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, 108, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
        					.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 230, GroupLayout.PREFERRED_SIZE)
        					.addGap(43)
        					.addComponent(jButton4, GroupLayout.PREFERRED_SIZE, 83, GroupLayout.PREFERRED_SIZE)
        					.addGap(62))))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(137)
        			.addComponent(btnNewButton, GroupLayout.PREFERRED_SIZE, 103, GroupLayout.PREFERRED_SIZE)
        			.addGap(50)
        			.addComponent(btnNewButton_1, GroupLayout.PREFERRED_SIZE, 91, GroupLayout.PREFERRED_SIZE)
        			.addContainerGap(293, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 170, GroupLayout.PREFERRED_SIZE)
        			.addGap(40)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jButton4)
        				.addComponent(jComboBox1, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
        				.addComponent(jTextField3, GroupLayout.PREFERRED_SIZE, 29, GroupLayout.PREFERRED_SIZE))
        			.addGap(36)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnNewButton, GroupLayout.PREFERRED_SIZE, 33, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnNewButton_1, GroupLayout.PREFERRED_SIZE, 35, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap(165, Short.MAX_VALUE))
        );
        
        getContentPane().setLayout(layout);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    private void fetchDataFromMySQL() {
        try {
        	Connection conn = DAO.getJDBCConnection();
            String query = "SELECT ID,username,password,nickname FROM user";
            PreparedStatement ps = conn.prepareStatement(query);
            ResultSet resultSet = ps.executeQuery(query);
            tableModel.setRowCount(0);
            while (resultSet.next()) {
            	String id=resultSet.getString("ID");
                String email = resultSet.getString("username");
                String tdn = resultSet.getString("password");
                String tnd = resultSet.getString("nickname");
               
                tableModel.addRow(new Object[]{id,email, tdn, tnd});
            }
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void searchById(String searchId) {
        try {
            Connection conn = DAO.getJDBCConnection();
            String query = "SELECT ID,username,password,nickname FROM user WHERE ID = ?";
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, searchId);
            ResultSet resultSet = ps.executeQuery();
            tableModel.setRowCount(0);
            while (resultSet.next()) {
                String id = resultSet.getString("ID");
                String email = resultSet.getString("username");
                String tdn = resultSet.getString("password");
                String tnd = resultSet.getString("nickname");
                
                tableModel.addRow(new Object[]{id, email, tdn, tnd});
            }
            
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void deleteRecord(String id) {
	    try {
	        Connection conn = DAO.getJDBCConnection();
	        String query = "DELETE FROM user where ID=?";
	        PreparedStatement ps = conn.prepareStatement(query);
	        ps.setString(1, id);
	        ps.executeUpdate();
	        conn.close();
	    } catch (SQLException e) {
	        e.printStackTrace();
	    }
	}
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            if(jTextField3.getText().length()==0){
                JOptionPane.showMessageDialog(rootPane, "Vui lòng nhập ID của User");
                return;
            }
            if(jComboBox1.getSelectedIndex()<1){
                JOptionPane.showMessageDialog(rootPane, "Vui lòng chọn lý do");
                return;
            }
            int userId = Integer.parseInt(jTextField3.getText());
            User user = new User();
            user.setID(userId);
            userDAO.updateBannedStatus(user, true);
            ServerThread serverThread = Server.serverThreadBus.getServerThreadByUserID(userId);
            serverThread.write("banned-notice,"+jComboBox1.getSelectedItem());
            if(serverThread.getRoom()!=null){
                Room room = serverThread.getRoom();
                ServerThread competitorThread = room.getCompetitor(serverThread.getClientNumber());
                room.setUsersToNotPlaying();
                if(competitorThread!=null){
                    room.decreaseNumberOfGame();
                    competitorThread.write("left-room,");
                    competitorThread.setRoom(null);
                }
                serverThread.setRoom(null);
            }
            Server.admin.addMessage("User có ID "+ userId+" đã bị BAN");
            serverThread.setUser(null);
            Server.serverThreadBus.boardCast(-1, "chat-server,"+"User có ID "+ userId+" đã bị BAN");
            JOptionPane.showMessageDialog(rootPane, "Đã BAN user "+userId);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Có lỗi xảy ra");
        }
    }//GEN-LAST:event_jButton4ActionPerformed
   
    public void addMessage(String message) {
       
    }
	private DefaultTableModel tableModel ;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        setVisible(true);
        fetchDataFromMySQL();
        
    }
}
